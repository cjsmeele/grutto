/* Copyright (c) 2018, Chris Smeele
 *
 * This file is part of Grutto.
 *
 * Grutto is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Grutto is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Grutto.  If not, see <https://www.gnu.org/licenses/>.
 */
#include "pic.hh"
#include "handlers.hh"

namespace Int::Pic {

    static u64 idt[256];

    struct {
        u16 limit;
        u32 base;
    } __attribute__((packed))
        idtr;

    static inline void lidt(void *addr, u16 size) {

        idtr = { size, (u32)addr };

        asm volatile ("lidtl (%0)" : : "a" (&idtr) :);
    }

    static inline  u64 idt_entry(bool present,
                                 u32 offset,
                                 u16 sel,
                                 u8  dpl,
                                 u8  type) {
        return (  ((u64)(offset >> 16)    << 48)
                | ((u64)(present)         << 47)
                | ((u64)(dpl    & 0x3)    << 45)
                | ((u64)(type   & 0xf)    << 40)
                | ((u64)(sel    & 0xffff) << 16)
                | ((u64)(offset & 0xffff)));
    }


    static void install_handlers() {

#define F(num) \
    idt[num] = idt_entry(true, (u32)interrupt_handler_##num, (1 << 3), 0, 0xe)
//#define F(num) idt[num] = 0xffffffff555555555;

        F(0x00); F(0x01); F(0x02); F(0x03); F(0x04); F(0x05); F(0x06); F(0x07);
        F(0x08); F(0x09); F(0x0a); F(0x0b); F(0x0c); F(0x0d); F(0x0e); F(0x0f);
        F(0x10); F(0x11); F(0x12); F(0x13); F(0x14); F(0x15); F(0x16); F(0x17);
        F(0x18); F(0x19); F(0x1a); F(0x1b); F(0x1c); F(0x1d); F(0x1e); F(0x1f);

        F(0x20); F(0x21); F(0x22); F(0x23); F(0x24); F(0x25); F(0x26); F(0x27);

        F(0x28); F(0x29); F(0x2a); F(0x2b); F(0x2c); F(0x2d); F(0x2e); F(0x2f);

        F(0x30); F(0x31); F(0x32); F(0x33); F(0x34); F(0x35); F(0x36); F(0x37);
        F(0x38); F(0x39); F(0x3a); F(0x3b); F(0x3c); F(0x3d); F(0x3e); F(0x3f);
        F(0x40); F(0x41); F(0x42); F(0x43); F(0x44); F(0x45); F(0x46); F(0x47);
        F(0x48); F(0x49); F(0x4a); F(0x4b); F(0x4c); F(0x4d); F(0x4e); F(0x4f);
        F(0x50); F(0x51); F(0x52); F(0x53); F(0x54); F(0x55); F(0x56); F(0x57);
        F(0x58); F(0x59); F(0x5a); F(0x5b); F(0x5c); F(0x5d); F(0x5e); F(0x5f);
        F(0x60); F(0x61); F(0x62); F(0x63); F(0x64); F(0x65); F(0x66); F(0x67);
        F(0x68); F(0x69); F(0x6a); F(0x6b); F(0x6c); F(0x6d); F(0x6e); F(0x6f);
        F(0x70); F(0x71); F(0x72); F(0x73); F(0x74); F(0x75); F(0x76); F(0x77);
        F(0x78); F(0x79); F(0x7a); F(0x7b); F(0x7c); F(0x7d); F(0x7e); F(0x7f);
        F(0x80); F(0x81); F(0x82); F(0x83); F(0x84); F(0x85); F(0x86); F(0x87);
        F(0x88); F(0x89); F(0x8a); F(0x8b); F(0x8c); F(0x8d); F(0x8e); F(0x8f);
        F(0x90); F(0x91); F(0x92); F(0x93); F(0x94); F(0x95); F(0x96); F(0x97);
        F(0x98); F(0x99); F(0x9a); F(0x9b); F(0x9c); F(0x9d); F(0x9e); F(0x9f);
        F(0xa0); F(0xa1); F(0xa2); F(0xa3); F(0xa4); F(0xa5); F(0xa6); F(0xa7);
        F(0xa8); F(0xa9); F(0xaa); F(0xab); F(0xac); F(0xad); F(0xae); F(0xaf);
        F(0xb0); F(0xb1); F(0xb2); F(0xb3); F(0xb4); F(0xb5); F(0xb6); F(0xb7);
        F(0xb8); F(0xb9); F(0xba); F(0xbb); F(0xbc); F(0xbd); F(0xbe); F(0xbf);
        F(0xc0); F(0xc1); F(0xc2); F(0xc3); F(0xc4); F(0xc5); F(0xc6); F(0xc7);
        F(0xc8); F(0xc9); F(0xca); F(0xcb); F(0xcc); F(0xcd); F(0xce); F(0xcf);
        F(0xd0); F(0xd1); F(0xd2); F(0xd3); F(0xd4); F(0xd5); F(0xd6); F(0xd7);
        F(0xd8); F(0xd9); F(0xda); F(0xdb); F(0xdc); F(0xdd); F(0xde); F(0xdf);
        F(0xe0); F(0xe1); F(0xe2); F(0xe3); F(0xe4); F(0xe5); F(0xe6); F(0xe7);
        F(0xe8); F(0xe9); F(0xea); F(0xeb); F(0xec); F(0xed); F(0xee); F(0xef);
        F(0xf0); F(0xf1); F(0xf2); F(0xf3); F(0xf4); F(0xf5); F(0xf6); F(0xf7);
        F(0xf8); F(0xf9); F(0xfa); F(0xfb); F(0xfc); F(0xfd); F(0xfe); F(0xff);
#undef F

    }

    void init() {
        //u8 mask_master = Io::inb(master_port);
        //u8 mask_slave  = Io::inb(slave_port);

        Io::outb(master_port, cmd_init | 0x01); // init + ICW4
        Io::outb(slave_port,  cmd_init | 0x01);

        Io::outb(master_port + 1, 0x20); // master offset.
        Io::outb(slave_port  + 1, 0x30); // slave offset.

        Io::outb(master_port + 1, 0x04);
        Io::outb(slave_port  + 1, 0x02);

        Io::outb(master_port + 1, 0x01);
        Io::outb(slave_port  + 1, 0x01);

        //Io::outb(master_port + 1, mask_master); // Restore IRQ mask.
        //Io::outb(slave_port  + 1, mask_slave);
        Io::outb(master_port + 1, 0); // Clear IRQ mask.
        Io::outb(slave_port  + 1, 0);

        install_handlers();
        lidt(idt, sizeof(idt) - 1);

        // not here
        //sti();
    }
}
